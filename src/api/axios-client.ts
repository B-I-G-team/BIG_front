//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

//-----ClientClass--Client---
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming


export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @return Default Response
     */
    anonymous(  cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAnonymous(_response);
        });
    }

    protected processAnonymous(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Default Response
     */
    kakao(  cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/auth/kakao";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processKakao(_response);
        });
    }

    protected processKakao(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Default Response
     * @deprecated
     */
    callback(code: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/auth/kakao/callback?";
          if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined and cannot be null.");
          else
            url_ += "code=" + encodeURIComponent("" + code) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCallback(_response);
        });
    }

    protected processCallback(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Default Response
     */
    bookings(body: Body | null | undefined , cancelToken?: CancelToken | undefined): Promise<Anonymous> {
        let url_ = this.baseUrl + "/bookings";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBookings(_response);
        });
    }

    protected processBookings(response: AxiosResponse): Promise<Anonymous> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Anonymous.fromJS(resultData200);
            return Promise.resolve<Anonymous>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous>(null as any);
    }

    /**
     * @return Default Response
     */
    bookingsAll(gymID: string, firstTime: string, lastTime: string , cancelToken?: CancelToken | undefined): Promise<Anonymous2[]> {
        let url_ = this.baseUrl + "/bookings?";
          if (gymID === undefined || gymID === null)
            throw new Error("The parameter 'gymID' must be defined and cannot be null.");
          else
            url_ += "gymID=" + encodeURIComponent("" + gymID) + "&";
          if (firstTime === undefined || firstTime === null)
            throw new Error("The parameter 'firstTime' must be defined and cannot be null.");
          else
            url_ += "firstTime=" + encodeURIComponent("" + firstTime) + "&";
          if (lastTime === undefined || lastTime === null)
            throw new Error("The parameter 'lastTime' must be defined and cannot be null.");
          else
            url_ += "lastTime=" + encodeURIComponent("" + lastTime) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBookingsAll(_response);
        });
    }

    protected processBookingsAll(response: AxiosResponse): Promise<Anonymous2[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Anonymous2.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<Anonymous2[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous2[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Default Response
     */
    gymPOST(body: Body2 | null | undefined , cancelToken?: CancelToken | undefined): Promise<Anonymous3> {
        let url_ = this.baseUrl + "/gym";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGymPOST(_response);
        });
    }

    protected processGymPOST(response: AxiosResponse): Promise<Anonymous3> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = Anonymous3.fromJS(resultData201);
            return Promise.resolve<Anonymous3>(result201);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous3>(null as any);
    }

    /**
     * @param offset (optional) number
     * @param limit (optional) number
     * @param search (optional) 검색어
     * @return Default Response
     */
    gymGET(offset: string | null | undefined, limit: string | null | undefined, search: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<Anonymous4> {
        let url_ = this.baseUrl + "/gym?";
        if (offset !== undefined && offset !== null)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGymGET(_response);
        });
    }

    protected processGymGET(response: AxiosResponse): Promise<Anonymous4> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Anonymous4.fromJS(resultData200);
            return Promise.resolve<Anonymous4>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous4>(null as any);
    }

    /**
     * @return Default Response
     */
    gymGET2(gymID: string , cancelToken?: CancelToken | undefined): Promise<Anonymous5> {
        let url_ = this.baseUrl + "/gym/{gymID}";

        if (gymID === undefined || gymID === null)
          throw new Error("The parameter 'gymID' must be defined.");
        url_ = url_.replace("{gymID}", encodeURIComponent("" + gymID));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGymGET2(_response);
        });
    }

    protected processGymGET2(response: AxiosResponse): Promise<Anonymous5> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Anonymous5.fromJS(resultData200);
            return Promise.resolve<Anonymous5>(result200);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = Anonymous6.fromJS(resultData404);
            return throwException("Default Response", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous5>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Default Response
     */
    teamsPOST(body: Body3 | null | undefined , cancelToken?: CancelToken | undefined): Promise<Anonymous7> {
        let url_ = this.baseUrl + "/teams";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTeamsPOST(_response);
        });
    }

    protected processTeamsPOST(response: AxiosResponse): Promise<Anonymous7> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Anonymous7.fromJS(resultData200);
            return Promise.resolve<Anonymous7>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous7>(null as any);
    }

    /**
     * @param offset (optional) number
     * @param limit (optional) number
     * @param search (optional) 검색어
     * @return Default Response
     */
    teamsGET(offset: string | null | undefined, limit: string | null | undefined, search: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<Anonymous8> {
        let url_ = this.baseUrl + "/teams?";
        if (offset !== undefined && offset !== null)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTeamsGET(_response);
        });
    }

    protected processTeamsGET(response: AxiosResponse): Promise<Anonymous8> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Anonymous8.fromJS(resultData200);
            return Promise.resolve<Anonymous8>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous8>(null as any);
    }

    /**
     * @param extension (optional) 파일의 확장자 (ex. png, jpeg, ...)
     * @return Default Response
     */
    presigned(extension: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<Anonymous9> {
        let url_ = this.baseUrl + "/upload/presigned?";
        if (extension !== undefined && extension !== null)
            url_ += "extension=" + encodeURIComponent("" + extension) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPresigned(_response);
        });
    }

    protected processPresigned(response: AxiosResponse): Promise<Anonymous9> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = Anonymous9.fromJS(resultData201);
            return Promise.resolve<Anonymous9>(result201);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous9>(null as any);
    }

    /**
     * @return Default Response
     */
    meGET(  cancelToken?: CancelToken | undefined): Promise<Anonymous10> {
        let url_ = this.baseUrl + "/users/me";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMeGET(_response);
        });
    }

    protected processMeGET(response: AxiosResponse): Promise<Anonymous10> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Anonymous10.fromJS(resultData200);
            return Promise.resolve<Anonymous10>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous10>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Default Response
     */
    mePUT(body: Body4 | null | undefined , cancelToken?: CancelToken | undefined): Promise<Anonymous11> {
        let url_ = this.baseUrl + "/users/me";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMePUT(_response);
        });
    }

    protected processMePUT(response: AxiosResponse): Promise<Anonymous11> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Anonymous11.fromJS(resultData200);
            return Promise.resolve<Anonymous11>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous11>(null as any);
    }
}

//-----/ClientClass----

export * as Query from './axios-client/Query';



//-----Types.File-----
export class Body implements IBody {
    gymID!: string;
    teamID!: string;
    startTime!: string;
    endTime!: string;

    constructor(data?: IBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gymID = _data["gymID"];
            this.teamID = _data["teamID"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
        }
    }

    static fromJS(data: any): Body {
        data = typeof data === 'object' ? data : {};
        let result = new Body();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gymID"] = this.gymID;
        data["teamID"] = this.teamID;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        return data;
    }
}

export interface IBody {
    gymID: string;
    teamID: string;
    startTime: string;
    endTime: string;
}

export class Body2 implements IBody2 {
    address1!: string;
    address2!: string;
    /** mm:ss */
    openTime!: string;
    /** mm:ss */
    closeTime!: string;
    defaultPrice!: number;
    name!: string;
    phone!: string;
    images!: string[];

    constructor(data?: IBody2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.images = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.address1 = _data["address1"];
            this.address2 = _data["address2"];
            this.openTime = _data["openTime"];
            this.closeTime = _data["closeTime"];
            this.defaultPrice = _data["defaultPrice"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
        }
    }

    static fromJS(data: any): Body2 {
        data = typeof data === 'object' ? data : {};
        let result = new Body2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["address1"] = this.address1;
        data["address2"] = this.address2;
        data["openTime"] = this.openTime;
        data["closeTime"] = this.closeTime;
        data["defaultPrice"] = this.defaultPrice;
        data["name"] = this.name;
        data["phone"] = this.phone;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        return data;
    }
}

export interface IBody2 {
    address1: string;
    address2: string;
    /** mm:ss */
    openTime: string;
    /** mm:ss */
    closeTime: string;
    defaultPrice: number;
    name: string;
    phone: string;
    images: string[];
}

export class Body3 implements IBody3 {
    name!: string;
    image?: string | undefined;
    introduction?: string | undefined;
    local?: string | undefined;

    constructor(data?: IBody3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.image = _data["image"];
            this.introduction = _data["introduction"];
            this.local = _data["local"];
        }
    }

    static fromJS(data: any): Body3 {
        data = typeof data === 'object' ? data : {};
        let result = new Body3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["image"] = this.image;
        data["introduction"] = this.introduction;
        data["local"] = this.local;
        return data;
    }
}

export interface IBody3 {
    name: string;
    image?: string | undefined;
    introduction?: string | undefined;
    local?: string | undefined;
}

export class Body4 implements IBody4 {
    position?: string | undefined;
    height?: number | undefined;
    weight?: number | undefined;

    constructor(data?: IBody4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.position = _data["position"];
            this.height = _data["height"];
            this.weight = _data["weight"];
        }
    }

    static fromJS(data: any): Body4 {
        data = typeof data === 'object' ? data : {};
        let result = new Body4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["position"] = this.position;
        data["height"] = this.height;
        data["weight"] = this.weight;
        return data;
    }
}

export interface IBody4 {
    position?: string | undefined;
    height?: number | undefined;
    weight?: number | undefined;
}

export class Anonymous implements IAnonymous {
    id!: string;
    startTime!: Date;
    endTime!: Date;
    amount!: number;
    status!: Status;
    createdAt!: Date;
    updatedAt?: Date | undefined;
    gymID!: string;

    constructor(data?: IAnonymous) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>undefined;
            this.amount = _data["amount"];
            this.status = _data["status"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.gymID = _data["gymID"];
        }
    }

    static fromJS(data: any): Anonymous {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["amount"] = this.amount;
        data["status"] = this.status;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["gymID"] = this.gymID;
        return data;
    }
}

export interface IAnonymous {
    id: string;
    startTime: Date;
    endTime: Date;
    amount: number;
    status: Status;
    createdAt: Date;
    updatedAt?: Date | undefined;
    gymID: string;
}

export class Anonymous2 implements IAnonymous2 {
    id!: string;
    startTime!: Date;
    endTime!: Date;
    amount!: number;
    status!: Status2;
    createdAt!: Date;
    updatedAt?: Date | undefined;
    gymID!: string;

    constructor(data?: IAnonymous2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>undefined;
            this.amount = _data["amount"];
            this.status = _data["status"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.gymID = _data["gymID"];
        }
    }

    static fromJS(data: any): Anonymous2 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["amount"] = this.amount;
        data["status"] = this.status;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["gymID"] = this.gymID;
        return data;
    }
}

export interface IAnonymous2 {
    id: string;
    startTime: Date;
    endTime: Date;
    amount: number;
    status: Status2;
    createdAt: Date;
    updatedAt?: Date | undefined;
    gymID: string;
}

export class Anonymous3 implements IAnonymous3 {
    id!: string;
    address1!: string;
    address2!: string;
    openTime!: string;
    closeTime!: string;
    defaultPrice!: number;
    name!: string;
    phone!: string;
    images!: Images[];
    createdAt!: Date;
    updatedAt?: Date | undefined;

    constructor(data?: IAnonymous3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.images = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.address1 = _data["address1"];
            this.address2 = _data["address2"];
            this.openTime = _data["openTime"];
            this.closeTime = _data["closeTime"];
            this.defaultPrice = _data["defaultPrice"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(Images.fromJS(item));
            }
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Anonymous3 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address1"] = this.address1;
        data["address2"] = this.address2;
        data["openTime"] = this.openTime;
        data["closeTime"] = this.closeTime;
        data["defaultPrice"] = this.defaultPrice;
        data["name"] = this.name;
        data["phone"] = this.phone;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAnonymous3 {
    id: string;
    address1: string;
    address2: string;
    openTime: string;
    closeTime: string;
    defaultPrice: number;
    name: string;
    phone: string;
    images: Images[];
    createdAt: Date;
    updatedAt?: Date | undefined;
}

export class Anonymous4 implements IAnonymous4 {
    data!: Data[];
    totalCount!: number;

    constructor(data?: IAnonymous4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Data.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): Anonymous4 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }
}

export interface IAnonymous4 {
    data: Data[];
    totalCount: number;
}

export class Anonymous5 implements IAnonymous5 {
    id!: string;
    address1!: string;
    address2!: string;
    openTime!: string;
    closeTime!: string;
    defaultPrice!: number;
    name!: string;
    phone!: string;
    images!: Images2[];
    createdAt!: Date;
    updatedAt?: Date | undefined;

    constructor(data?: IAnonymous5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.images = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.address1 = _data["address1"];
            this.address2 = _data["address2"];
            this.openTime = _data["openTime"];
            this.closeTime = _data["closeTime"];
            this.defaultPrice = _data["defaultPrice"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(Images2.fromJS(item));
            }
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Anonymous5 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address1"] = this.address1;
        data["address2"] = this.address2;
        data["openTime"] = this.openTime;
        data["closeTime"] = this.closeTime;
        data["defaultPrice"] = this.defaultPrice;
        data["name"] = this.name;
        data["phone"] = this.phone;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAnonymous5 {
    id: string;
    address1: string;
    address2: string;
    openTime: string;
    closeTime: string;
    defaultPrice: number;
    name: string;
    phone: string;
    images: Images2[];
    createdAt: Date;
    updatedAt?: Date | undefined;
}

export class Anonymous6 implements IAnonymous6 {
    message!: string;

    constructor(data?: IAnonymous6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous6 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous6 {
    message: string;
}

export class Anonymous7 implements IAnonymous7 {
    id!: string;
    teamName!: string;
    teamImage!: string;
    leaderName!: string;
    leaderImage!: string;
    local!: string;
    introduction!: string;
    peopleCount!: number;

    constructor(data?: IAnonymous7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.teamName = _data["teamName"];
            this.teamImage = _data["teamImage"];
            this.leaderName = _data["leaderName"];
            this.leaderImage = _data["leaderImage"];
            this.local = _data["local"];
            this.introduction = _data["introduction"];
            this.peopleCount = _data["peopleCount"];
        }
    }

    static fromJS(data: any): Anonymous7 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["teamName"] = this.teamName;
        data["teamImage"] = this.teamImage;
        data["leaderName"] = this.leaderName;
        data["leaderImage"] = this.leaderImage;
        data["local"] = this.local;
        data["introduction"] = this.introduction;
        data["peopleCount"] = this.peopleCount;
        return data;
    }
}

export interface IAnonymous7 {
    id: string;
    teamName: string;
    teamImage: string;
    leaderName: string;
    leaderImage: string;
    local: string;
    introduction: string;
    peopleCount: number;
}

export class Anonymous8 implements IAnonymous8 {
    data!: Data2[];
    totalCount!: number;

    constructor(data?: IAnonymous8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Data2.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): Anonymous8 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }
}

export interface IAnonymous8 {
    data: Data2[];
    totalCount: number;
}

export class Anonymous9 implements IAnonymous9 {
    presigned!: string;
    url!: string;

    constructor(data?: IAnonymous9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.presigned = _data["presigned"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Anonymous9 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["presigned"] = this.presigned;
        data["url"] = this.url;
        return data;
    }
}

export interface IAnonymous9 {
    presigned: string;
    url: string;
}

export class Anonymous10 implements IAnonymous10 {
    id!: string;
    name!: string;
    email!: string;
    emailVerified!: Date;
    image!: string;
    introduction!: string;
    position!: string;
    height!: number;
    weight!: number;
    team!: Team;
    createdAt!: Date;
    updatedAt!: Date;

    constructor(data?: IAnonymous10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.team = new Team();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.emailVerified = _data["emailVerified"] ? new Date(_data["emailVerified"].toString()) : <any>undefined;
            this.image = _data["image"];
            this.introduction = _data["introduction"];
            this.position = _data["position"];
            this.height = _data["height"];
            this.weight = _data["weight"];
            this.team = _data["team"] ? Team.fromJS(_data["team"]) : new Team();
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Anonymous10 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["emailVerified"] = this.emailVerified ? this.emailVerified.toISOString() : <any>undefined;
        data["image"] = this.image;
        data["introduction"] = this.introduction;
        data["position"] = this.position;
        data["height"] = this.height;
        data["weight"] = this.weight;
        data["team"] = this.team ? this.team.toJSON() : <any>undefined;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAnonymous10 {
    id: string;
    name: string;
    email: string;
    emailVerified: Date;
    image: string;
    introduction: string;
    position: string;
    height: number;
    weight: number;
    team: Team;
    createdAt: Date;
    updatedAt: Date;
}

export class Anonymous11 implements IAnonymous11 {
    id!: string;
    name!: string;
    email!: string;
    emailVerified!: Date;
    image!: string;
    introduction!: string;
    position!: string;
    height!: number;
    weight!: number;
    team!: Team2;
    createdAt!: Date;
    updatedAt!: Date;

    constructor(data?: IAnonymous11) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.team = new Team2();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.emailVerified = _data["emailVerified"] ? new Date(_data["emailVerified"].toString()) : <any>undefined;
            this.image = _data["image"];
            this.introduction = _data["introduction"];
            this.position = _data["position"];
            this.height = _data["height"];
            this.weight = _data["weight"];
            this.team = _data["team"] ? Team2.fromJS(_data["team"]) : new Team2();
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Anonymous11 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous11();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["emailVerified"] = this.emailVerified ? this.emailVerified.toISOString() : <any>undefined;
        data["image"] = this.image;
        data["introduction"] = this.introduction;
        data["position"] = this.position;
        data["height"] = this.height;
        data["weight"] = this.weight;
        data["team"] = this.team ? this.team.toJSON() : <any>undefined;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAnonymous11 {
    id: string;
    name: string;
    email: string;
    emailVerified: Date;
    image: string;
    introduction: string;
    position: string;
    height: number;
    weight: number;
    team: Team2;
    createdAt: Date;
    updatedAt: Date;
}

export class Status implements IStatus {

    constructor(data?: IStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Status {
        data = typeof data === 'object' ? data : {};
        let result = new Status();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IStatus {
}

export class Status2 implements IStatus2 {

    constructor(data?: IStatus2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Status2 {
        data = typeof data === 'object' ? data : {};
        let result = new Status2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IStatus2 {
}

export class Images implements IImages {
    id!: string;
    url!: string;
    createdAt!: Date;

    constructor(data?: IImages) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.url = _data["url"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Images {
        data = typeof data === 'object' ? data : {};
        let result = new Images();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["url"] = this.url;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IImages {
    id: string;
    url: string;
    createdAt: Date;
}

export class Data implements IData {
    id!: string;
    address1!: string;
    address2!: string;
    openTime!: string;
    closeTime!: string;
    defaultPrice!: number;
    name!: string;
    phone!: string;
    images!: Images3[];
    createdAt!: Date;
    updatedAt?: Date | undefined;

    constructor(data?: IData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.images = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.address1 = _data["address1"];
            this.address2 = _data["address2"];
            this.openTime = _data["openTime"];
            this.closeTime = _data["closeTime"];
            this.defaultPrice = _data["defaultPrice"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(Images3.fromJS(item));
            }
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Data {
        data = typeof data === 'object' ? data : {};
        let result = new Data();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address1"] = this.address1;
        data["address2"] = this.address2;
        data["openTime"] = this.openTime;
        data["closeTime"] = this.closeTime;
        data["defaultPrice"] = this.defaultPrice;
        data["name"] = this.name;
        data["phone"] = this.phone;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IData {
    id: string;
    address1: string;
    address2: string;
    openTime: string;
    closeTime: string;
    defaultPrice: number;
    name: string;
    phone: string;
    images: Images3[];
    createdAt: Date;
    updatedAt?: Date | undefined;
}

export class Images2 implements IImages2 {
    id!: string;
    url!: string;
    createdAt!: Date;

    constructor(data?: IImages2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.url = _data["url"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Images2 {
        data = typeof data === 'object' ? data : {};
        let result = new Images2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["url"] = this.url;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IImages2 {
    id: string;
    url: string;
    createdAt: Date;
}

export class Data2 implements IData2 {
    id!: string;
    teamName!: string;
    teamImage!: string;
    leaderName!: string;
    leaderImage!: string;
    local!: string;
    introduction!: string;
    peopleCount!: number;

    constructor(data?: IData2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.teamName = _data["teamName"];
            this.teamImage = _data["teamImage"];
            this.leaderName = _data["leaderName"];
            this.leaderImage = _data["leaderImage"];
            this.local = _data["local"];
            this.introduction = _data["introduction"];
            this.peopleCount = _data["peopleCount"];
        }
    }

    static fromJS(data: any): Data2 {
        data = typeof data === 'object' ? data : {};
        let result = new Data2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["teamName"] = this.teamName;
        data["teamImage"] = this.teamImage;
        data["leaderName"] = this.leaderName;
        data["leaderImage"] = this.leaderImage;
        data["local"] = this.local;
        data["introduction"] = this.introduction;
        data["peopleCount"] = this.peopleCount;
        return data;
    }
}

export interface IData2 {
    id: string;
    teamName: string;
    teamImage: string;
    leaderName: string;
    leaderImage: string;
    local: string;
    introduction: string;
    peopleCount: number;
}

export class Team implements ITeam {
    id!: string;
    name!: string;
    image!: string;

    constructor(data?: ITeam) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.image = _data["image"];
        }
    }

    static fromJS(data: any): Team {
        data = typeof data === 'object' ? data : {};
        let result = new Team();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["image"] = this.image;
        return data;
    }
}

export interface ITeam {
    id: string;
    name: string;
    image: string;
}

export class Team2 implements ITeam2 {
    id!: string;
    name!: string;
    image!: string;

    constructor(data?: ITeam2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.image = _data["image"];
        }
    }

    static fromJS(data: any): Team2 {
        data = typeof data === 'object' ? data : {};
        let result = new Team2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["image"] = this.image;
        return data;
    }
}

export interface ITeam2 {
    id: string;
    name: string;
    image: string;
}

export class Images3 implements IImages3 {
    id!: string;
    url!: string;
    createdAt!: Date;

    constructor(data?: IImages3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.url = _data["url"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Images3 {
        data = typeof data === 'object' ? data : {};
        let result = new Images3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["url"] = this.url;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IImages3 {
    id: string;
    url: string;
    createdAt: Date;
}
//-----/CustomTypes.File-----

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

//-----/Types.File-----

import { addResultTypeFactory } from './axios-client/helpers';
export { setBaseUrl, getBaseUrl } from './axios-client/helpers';
export { setAxiosFactory, getAxios } from './axios-client/helpers';


//-----PersistorHydrator.File-----
import type { PersistedClient } from '@tanstack/react-query-persist-client';
import type { DehydratedState, QueryKey } from '@tanstack/react-query'
import { getResultTypeFactory } from './axios-client/helpers';

/*
 * If you have Dates in QueryKeys (i.e. in request parameters), you need to deserialize them to Dates correctly
 * (otherwise they are deserialized as strings by default, and your queries are broken).
 */
export function deserializeDate(str: unknown) {
  if (!str || typeof str !== 'string') return str;
  if (!/^\d\d\d\d\-\d\d\-\d\d/.test(str)) return str;
  
  const date = new Date(str);
  const isDate = date instanceof Date && !isNaN(date as any);
  
  return isDate ? date : str;
}

export function deserializeDatesInQueryKeys(queryKey: QueryKey) {
  return queryKey
    // We need to replace `null` with `undefined` in query key, because
    // `undefined` is serialized as `null`.
    // And most probably if we have `null` in QueryKey it actually means `undefined`.
    // We can't keep nulls, because they have a different meaning, and e.g. boolean parameters are not allowed to be null.
    .map(x => (x === null ? undefined : x))
    .map(x => deserializeDate(x));
}

export function deserializeClassesInQueryData(queryKey: QueryKey, data: any) {
  if (!data) {
    return data;
  } else if (typeof data !== 'object') {
    return data;
  } else if ('pages' in data && 'pageParams' in data && Array.isArray(data.pages) && Array.isArray(data.pageParams)) {
    // infinite query
    data.pages = data.pages.map((page:any) => deserializeClassesInQueryData(queryKey, page));
  } else if (Array.isArray(data)) {
    return data.map(elem => constructDtoClass(queryKey, elem));
  } else {
    return constructDtoClass(queryKey, data);
  }
}

/*
 * Pass this function as `deserialize` option to createSyncStoragePersister/createAsyncStoragePersister
 * to correctly deserialize your DTOs (including Dates)
 */
export function persisterDeserialize(cache: string): PersistedClient {
  const client: PersistedClient = JSON.parse(cache);
  client.clientState.queries.forEach((query) => {
    query.state.data = deserializeClassesInQueryData(query.queryKey, query.state.data);
    query.queryKey = deserializeDatesInQueryKeys(query.queryKey);
  });

  return client;
}

export function constructDtoClass(queryKey: QueryKey, data: any): unknown {
  const resultTypeKey = getResultTypeClassKey(queryKey);
  const constructorFunction = getResultTypeFactory(resultTypeKey);

  if (!data || !constructorFunction)
    return data;

  return constructorFunction(data);
}

export function getResultTypeClassKey(queryKey: QueryKey): string {
  if (!Array.isArray(queryKey)) {
    return queryKey as unknown as string;
  }
  if (queryKey.length >= 2) {
    // We concatenate first and second elements, because they uniquely identify the query.
    // All other QueryKey elements are query parameters
    return `${queryKey[0]}___${queryKey[1]}`;
  }

  // We actually should never reach this point :)
  return queryKey.join('___');
}

export function initPersister() {
  
  addResultTypeFactory('Client___bookingsAll', (data: any) => { const result = new Anonymous2(); result.init(data); return result; });
  addResultTypeFactory('Client___gymGET', (data: any) => { const result = new Anonymous4(); result.init(data); return result; });
  addResultTypeFactory('Client___gymGET2', (data: any) => { const result = new Anonymous5(); result.init(data); return result; });
  addResultTypeFactory('Client___teamsGET', (data: any) => { const result = new Anonymous8(); result.init(data); return result; });
  addResultTypeFactory('Client___presigned', (data: any) => { const result = new Anonymous9(); result.init(data); return result; });
  addResultTypeFactory('Client___meGET', (data: any) => { const result = new Anonymous10(); result.init(data); return result; });


}
//-----/PersistorHydrator.File----